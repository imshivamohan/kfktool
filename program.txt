import subprocess
import os

def liprod():
    renvs()
    print("Kafka Producer started...")
    print(f"In Topic Name: {Stname}")
    print(f"In schema id: {Sscid}")
    print(f"In SCHMA-URL: {Sscurl}")
    print(f"In BOOTSTRAP-SERVER: {Skboots}")
    command = ["confluent-7.0.1/bin/kafka-json-schema-console-producer", "-bootstrap-server",
               f"--property", "value.schema.id", f"{scid}",
               "--property", "schema.registry.url", f"{scurl}",
               "--property", "basic.auth.credentials.source", "USER_INFO",
               "--property", "schema.registry.basic.auth.user.info", f"{sapikey}:{sapipass}",
               "--property", "key.serializer", "org.apache.kafka.common.serialization.Stringserializer",
               "--property", "value.serializer", "io.confluent.kafka.serializers.json.KafkaJsonSchemaSerializer",
               "--producer.config", "client.properties"]
    process = subprocess.run(command, stdout=subprocess.PIPE, text=True)
    print(process.stdout)

def lipcons():
    renvs()
    print("Kafka Consumer started...")
    print(f"Topic Name: {tname}")
    print(f"Schema id: {scid}")
    print(f"Consumer Group: {cgid}")
    print(f"SCHEMA-URL: {scurl}")
    print(f"BOOTSTRAP-SERVER: {Skboots}")
    executable_path = "confluent-7.0.1/bin/kafka-json-schema-console-consumer"
    
    if os.path.exists(executable_path):
        command = [executable_path, "--bootstrap-server",
                   "--consumer.config", "client.properties",
                   "--property", "value.schema.id", f"{scid}",
                   "--property", "schema.registry.url", f"{scurl}",
                   "--property", "basic.auth.credentials.source", "USER_INFO",
                   "--property", "schema.registry.basic.auth.user.info", f"{sapikey}:{sapipass}",
                   "--property", "key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer",
                   "--property", "value.deserializer", "io.confluent.kafka.serializers.json.KafkaJsonSchemaDeserializer",
                   "--group", "Scrid",
                   "--property", "print.timestamp=true"]
        process = subprocess.run(command, stdout=subprocess.PIPE, text=True)
        print(process.stdout)
    else:
        print(f"File '{executable_path}' does not exist.")

def renvs():
    # Implementation for setting up necessary environment variables
    pass

# Example usage
Stname = "my_topic"
Sscid = "123"
Sscurl = "https://example.com"
Skboots = "localhost:9092"
scid = "456"
scurl = "https://example.com"
sapikey = "my_key"
sapipass = "my_password"
tname = "my_topic"
scid = "789"
cgid = "my_consumer_group"
scurl = "https://example.com"
Skboots = "localhost:9092"

liprod()
lipcons()
