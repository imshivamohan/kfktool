import json
from cryptography.fernet import Fernet

# Generate a local encryption key
encryption_key = Fernet.generate_key()
cipher_suite = Fernet(encryption_key)

def encrypt_field(plaintext):
    plaintext_bytes = bytes(json.dumps(plaintext), encoding="utf-8")
    encrypted_bytes = cipher_suite.encrypt(plaintext_bytes)
    return encrypted_bytes

def decrypt_field(ciphertext):
    decrypted_bytes = cipher_suite.decrypt(ciphertext)
    decrypted_plaintext = decrypted_bytes.decode("utf-8")
    return json.loads(decrypted_plaintext)

original_json = {
    "sensitive_field": "Sensitive value"
}

# Encrypt the sensitive field
encrypted_value = encrypt_field(original_json["sensitive_field"])

# Update the JSON with the encrypted value
original_json["sensitive_field"] = encrypted_value

# Serialize the JSON to a string
serialized_json = json.dumps(original_json)

# Store the encrypted JSON in a file
with open("encrypted_data.json", "w") as file:
    file.write(serialized_json)

# Retrieve the encrypted JSON from the file
with open("encrypted_data.json", "r") as file:
    retrieved_json = file.read()

# Deserialize the retrieved JSON string
deserialized_json = json.loads(retrieved_json)

# Decrypt the sensitive field
decrypted_value = decrypt_field(deserialized_json["sensitive_field"])

# Update the JSON with the decrypted value
deserialized_json["sensitive_field"] = decrypted_value

print(deserialized_json)
