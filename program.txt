from confluent_kafka import Producer
from confluent_kafka.serialization import SerializationContext, MessageField
from confluent_kafka.schema_registry import SchemaRegistryClient
from confluent_kafka.schema_registry.json_schema import JSONSerializer
from config import config
import time
import json
import requests

def fetch_latest_schema_from_registry(url, auth):
    response = requests.get(url, auth=auth)
    if response.status_code == 200:
        return response.json()
    else:
        raise Exception(f"Failed to fetch schema from registry. Error: {response.text}")

def create_objects_from_schema(schema, data):
    class DataObject:
        def __init__(self, **kwargs):
            for prop in schema['properties']:
                setattr(self, prop, kwargs.get(prop))

    objects = []
    for item in data:
        data_object = DataObject(**item)
        objects.append(data_object)

    return objects

def produce_events_with_schema(topic, schema, objects, auth):
    schema_str = json.dumps(schema)

    def object_to_dict(obj, ctx):
        return obj.__dict__

    def delivery_report(err, event):
        if err is not None:
            print(f'Delivery failed on reading for {event.key().decode("utf8")}: {err}')
        else:
            print(f'Data object for {event.key().decode("utf8")} produced to {event.topic()}')

    schema_registry_client = SchemaRegistryClient(url=config['schema.registry.url'],
                                                  basic_auth_user_info=config['schema.registry.basic.auth.user.info'],
                                                  schema_registry_properties={'ssl.key.location': config['ssl.key.location'],
                                                                              'ssl.certificate.location': config['ssl.certificate.location'],
                                                                              'ssl.ca.location': config['ssl.ca.location'],
                                                                              'sasl.mechanisms': 'PLAIN',
                                                                              'sasl.username': auth[0],
                                                                              'sasl.password': auth[1]})
    json_serializer = JSONSerializer(schema_str,
                                     schema_registry_client,
                                     object_to_dict)

    producer = Producer(config)

    for obj in objects:
        producer.produce(topic=topic, key=str(getattr(obj, 'name')),
                         value=json_serializer(obj,
                                               SerializationContext(topic, MessageField.VALUE)),
                         on_delivery=delivery_report)

    producer.flush()

if __name__ == '__main__':
    topic = 'data_objects'
    schema_registry_url = '<schema_registry_url>'
    auth = ('<username>', '<password>')  # Basic authentication credentials
    latest_schema = fetch_latest_schema_from_registry(schema_registry_url, auth)
    data = [
        {"name": "hello", "age": 33},
        {"name": "siva", "age": 44},
        {"name": "omg", "age": 22}
    ]

    objects = create_objects_from_schema(latest_schema['properties'], data)
    produce_events_with_schema(topic, latest_schema, objects, auth)
