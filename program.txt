from flask import Flask, render_template, request
import json
import jsonschema

app = Flask(__name__)

def format_json(input_json):
    formatted_json = json.dumps(json.loads(input_json), indent=4)
    return formatted_json

def validate_json(input_json):
    try:
        json.loads(input_json)
        return True
    except ValueError:
        return False

def write_json_to_file(json_data, filename):
    with open(filename, 'w') as file:
        file.write(json_data)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/format_json', methods=['POST'])
def format_json_route():
    input_json = request.form['json_input']

    if validate_json(input_json):
        formatted_json = format_json(input_json)
        single_line_json = formatted_json.replace('\n', '')
        filename = "formatted_json.txt"
        write_json_to_file(single_line_json, filename)
        with open(filename, 'r') as file:
            file_contents = file.read()
        return render_template('index.html', formatted_json=formatted_json, single_line_json=single_line_json, file_contents=file_contents)
    else:
        error_message = "Invalid JSON! Please enter a valid JSON."
        return render_template('index.html', error_message=error_message)

if __name__ == '__main__':
    app.run()



























import os
import subprocess
import tempfile
import sqlite3

# Step 1: Retrieve credentials from the database
conn = sqlite3.connect('your_database.db')
cursor = conn.cursor()
cursor.execute('SELECT username, password FROM your_table')
username, password = cursor.fetchone()
cursor.close()
conn.close()

# Step 2: Create JASS configuration file
jass_content = f'KafkaClient {{\n  org.apache.kafka.common.security.plain.PlainLoginModule required\n  username="{username}"\n  password="{password}";\n}}'
with tempfile.NamedTemporaryFile(suffix='.conf', delete=False) as temp_file:
    temp_file.write(jass_content.encode())

# Step 3: Set JASS configuration file as an environment variable
os.environ['KAFKA_JAAS_CONFIG'] = temp_file.name

# Step 4: Execute Kafka command-line commands
subprocess.run(['kafka-topics', '--list'], check=True)
# Perform other Kafka command-line operations as needed

# Step 5: Clean up
os.remove(temp_file.name)
del os.environ['KAFKA_JAAS_CONFIG']


import os
import tempfile
import sqlite3
import time

# Generate a session identifier (you can modify this according to your needs)
session_id = str(int(time.time()))

# Step 1: Retrieve configurations from the database
conn = sqlite3.connect('your_database.db')
cursor = conn.cursor()
cursor.execute('SELECT sasl_config, sasl_mechanism, security_protocol FROM your_table')
sasl_config, sasl_mechanism, security_protocol = cursor.fetchone()
cursor.close()
conn.close()

# Step 2: Create content for client.properties file
client_properties_content = f'sasl.jaas.config={sasl_config}\n' \
                            f'sasl.mechanism={sasl_mechanism}\n' \
                            f'security.protocol={security_protocol}\n'

# Step 3: Save content to a session-specific client.properties file
temp_file_name = f"client_{session_id}.properties"
temp_file_path = os.path.join(tempfile.gettempdir(), temp_file_name)
with open(temp_file_path, 'w') as temp_file:
    temp_file.write(client_properties_content)

# Step 4: Use the session-specific client.properties file in Kafka operations
# Use the Kafka client library of your choice and provide the path to the session-specific client.properties file when creating a Kafka client or consumer

# Step 5: Simulate session expiration
time.sleep(60)  # Simulating a session timeout of 60 seconds

# Step 6: Clean up the session-specific client.properties file
os.remove(temp_file_path)



import os
import tempfile
import sqlite3
import time
from datetime import datetime, timedelta
from flask import Flask, session, redirect

app = Flask(__name__)
app.config['SESSION_TYPE'] = 'filesystem'
app.config['SECRET_KEY'] = 'your-secret-key'
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(minutes=111)

# Check session timeout on every request
@app.before_request
def check_session_timeout():
    if 'last_activity' in session:
        # Calculate the time difference between the current time and the last activity time
        last_activity = session['last_activity']
        current_time = datetime.now()
        time_diff = current_time - last_activity

        # Check if the session has exceeded the session lifetime
        if time_diff > app.config['PERMANENT_SESSION_LIFETIME']:
            session.clear()  # Clear the session data

            # Delete the session-specific client.properties file
            if 'client_properties_file' in session:
                client_properties_file = session['client_properties_file']
                os.remove(client_properties_file)

            return redirect('/')  # Redirect the user to the login page or any appropriate page

    # Update the last activity time in the session
    session['last_activity'] = datetime.now()


# Generate a session-specific client.properties file
def generate_client_properties_file():
    # Retrieve configurations from the database
    conn = sqlite3.connect('your_database.db')
    cursor = conn.cursor()
    cursor.execute('SELECT sasl_config, sasl_mechanism, security_protocol FROM your_table')
    sasl_config, sasl_mechanism, security_protocol = cursor.fetchone()
    cursor.close()
    conn.close()

    # Create content for client.properties file
    client_properties_content = f'sasl.jaas.config={sasl_config}\n' \
                                f'sasl.mechanism={sasl_mechanism}\n' \
                                f'security.protocol={security_protocol}\n'

    # Create a session-specific client.properties file
    temp_file = tempfile.NamedTemporaryFile(suffix='.properties', delete=False)
    temp_file.write(client_properties_content.encode())
    temp_file.close()

    return temp_file.name


# Set up the session and generate client.properties file
@app.route('/')
def index():
    session.permanent = True
    session['last_activity'] = datetime.now()

    # Generate the session-specific client.properties file
    client_properties_file = generate_client_properties_file()
    session['client_properties_file'] = client_properties_file

    return 'Session started'


if __name__ == '__main__':
    app.run()





import subprocess

bootstrap_server = "1kc-5k918-e8gnm.eastus2.azure.glb.confluent.cloud:9092"
topic = "ubs.accountactivity.payments.data.overdrive.mm.busa.fsi"
schema_id = "100323"
schema_registry_url = "https://psrc-92n1d.westus2.azure.confluent.cloud"
basic_auth_source = "USERINFO"
basic_auth_user_info = "FJ222X3WOHZZC3MO:FHR5Ii/9GIdpW00gmSVgCIkwS4WuLfsYbgCILLo7fZGvC2gww80txpmbnChryYod"
key_serializer = "org.apache.kafka.common.serialization.StringSerializer"
value_serializer = "io.confluent.kafka.serializers.json.KafkaJsonSchemaSerializer"
client_properties_file = "client.properties"
data_file = "data.txt"

command = f"cat {data_file} | confluent-7.3.1/bin/kafka-json-schema-console-producer-bootstrap-server {bootstrap_server} --topic {topic} --property value.schema.id={schema_id} --property schema.registry.url={schema_registry_url} --property basic.auth.credentials.source={basic_auth_source} --property schema.registry.basic.auth.user.info=\"{basic_auth_user_info}\" --property \"key.serializer\"=\"{key_serializer}\" --property \"value.serializer\"=\"{value_serializer}\" --producer.config {client_properties_file}"

# Execute the command and capture the output
process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
stdout, stderr = process.communicate()

# Print the standard output
print("Standard Output:")
print(stdout.decode())

# Print the standard error
print("Standard Error:")
print(stderr.decode())



